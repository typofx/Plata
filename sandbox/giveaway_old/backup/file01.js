/**
 * Minified by jsDelivr using Terser v5.14.1.
 * Original file: /npm/@walletconnect/core@1.8.0/dist/esm/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{parsePersonalSign,parseTransactionData,convertArrayBufferToHex,convertHexToArrayBuffer,getClientMeta,payloadId,uuid,formatRpcError,parseWalletConnectUri,convertNumberToHex,isJsonRpcResponseSuccess,isJsonRpcResponseError,isSilentPayload,getLocal,signingMethods,mobileLinkChoiceKey,isMobile,removeLocal}from"@walletconnect/utils";import SocketTransport from"@walletconnect/socket-transport";import{ERROR_SESSION_CONNECTED,ERROR_SESSION_DISCONNECTED,ERROR_SESSION_REJECTED,ERROR_MISSING_JSON_RPC,ERROR_MISSING_RESULT,ERROR_MISSING_ERROR,ERROR_MISSING_METHOD,ERROR_MISSING_ID,ERROR_INVALID_RESPONSE,ERROR_INVALID_URI,ERROR_MISSING_REQUIRED,ERROR_QRCODE_MODAL_NOT_PROVIDED,ERROR_QRCODE_MODAL_USER_CLOSED}from"./errors";import EventManager from"./events";import SessionStorage from"./storage";import{getBridgeUrl}from"./url";class Connector{constructor(e){if(this.protocol="wc",this.version=1,this._bridge="",this._key=null,this._clientId="",this._clientMeta=null,this._peerId="",this._peerMeta=null,this._handshakeId=0,this._handshakeTopic="",this._connected=!1,this._accounts=[],this._chainId=0,this._networkId=0,this._rpcUrl="",this._eventManager=new EventManager,this._clientMeta=getClientMeta()||e.connectorOpts.clientMeta||null,this._cryptoLib=e.cryptoLib,this._sessionStorage=e.sessionStorage||new SessionStorage(e.connectorOpts.storageId),this._qrcodeModal=e.connectorOpts.qrcodeModal,this._qrcodeModalOptions=e.connectorOpts.qrcodeModalOptions,this._signingMethods=[...signingMethods,...e.connectorOpts.signingMethods||[]],!e.connectorOpts.bridge&&!e.connectorOpts.uri&&!e.connectorOpts.session)throw new Error(ERROR_MISSING_REQUIRED);e.connectorOpts.bridge&&(this.bridge=getBridgeUrl(e.connectorOpts.bridge)),e.connectorOpts.uri&&(this.uri=e.connectorOpts.uri);const s=e.connectorOpts.session||this._getStorageSession();s&&(this.session=s),this.handshakeId&&this._subscribeToSessionResponse(this.handshakeId,"Session request rejected"),this._transport=e.transport||new SocketTransport({protocol:this.protocol,version:this.version,url:this.bridge,subscriptions:[this.clientId]}),this._subscribeToInternalEvents(),this._initTransport(),e.connectorOpts.uri&&this._subscribeToSessionRequest(),e.pushServerOpts&&this._registerPushServer(e.pushServerOpts)}set bridge(e){e&&(this._bridge=e)}get bridge(){return this._bridge}set key(e){if(!e)return;const s=convertHexToArrayBuffer(e);this._key=s}get key(){if(this._key){return convertArrayBufferToHex(this._key,!0)}return""}set clientId(e){e&&(this._clientId=e)}get clientId(){let e=this._clientId;return e||(e=this._clientId=uuid()),this._clientId}set peerId(e){e&&(this._peerId=e)}get peerId(){return this._peerId}set clientMeta(e){}get clientMeta(){let e=this._clientMeta;return e||(e=this._clientMeta=getClientMeta()),e}set peerMeta(e){this._peerMeta=e}get peerMeta(){return this._peerMeta}set handshakeTopic(e){e&&(this._handshakeTopic=e)}get handshakeTopic(){return this._handshakeTopic}set handshakeId(e){e&&(this._handshakeId=e)}get handshakeId(){return this._handshakeId}get uri(){return this._formatUri()}set uri(e){if(!e)return;const{handshakeTopic:s,bridge:t,key:n}=this._parseUri(e);this.handshakeTopic=s,this.bridge=t,this.key=n}set chainId(e){this._chainId=e}get chainId(){return this._chainId}set networkId(e){this._networkId=e}get networkId(){return this._networkId}set accounts(e){this._accounts=e}get accounts(){return this._accounts}set rpcUrl(e){this._rpcUrl=e}get rpcUrl(){return this._rpcUrl}set connected(e){}get connected(){return this._connected}set pending(e){}get pending(){return!!this._handshakeTopic}get session(){return{connected:this.connected,accounts:this.accounts,chainId:this.chainId,bridge:this.bridge,key:this.key,clientId:this.clientId,clientMeta:this.clientMeta,peerId:this.peerId,peerMeta:this.peerMeta,handshakeId:this.handshakeId,handshakeTopic:this.handshakeTopic}}set session(e){e&&(this._connected=e.connected,this.accounts=e.accounts,this.chainId=e.chainId,this.bridge=e.bridge,this.key=e.key,this.clientId=e.clientId,this.clientMeta=e.clientMeta,this.peerId=e.peerId,this.peerMeta=e.peerMeta,this.handshakeId=e.handshakeId,this.handshakeTopic=e.handshakeTopic)}on(e,s){const t={event:e,callback:s};this._eventManager.subscribe(t)}off(e){this._eventManager.unsubscribe(e)}async createInstantRequest(e){this._key=await this._generateKey();const s=this._formatRequest({method:"wc_instantRequest",params:[{peerId:this.clientId,peerMeta:this.clientMeta,request:this._formatRequest(e)}]});this.handshakeId=s.id,this.handshakeTopic=uuid(),this._eventManager.trigger({event:"display_uri",params:[this.uri]}),this.on("modal_closed",(()=>{throw new Error(ERROR_QRCODE_MODAL_USER_CLOSED)}));const t=()=>{this.killSession()};try{const e=await this._sendCallRequest(s);return e&&t(),e}catch(e){throw t(),e}}async connect(e){if(!this._qrcodeModal)throw new Error(ERROR_QRCODE_MODAL_NOT_PROVIDED);return this.connected?{chainId:this.chainId,accounts:this.accounts}:(await this.createSession(e),new Promise((async(e,s)=>{this.on("modal_closed",(()=>s(new Error(ERROR_QRCODE_MODAL_USER_CLOSED)))),this.on("connect",((t,n)=>{if(t)return s(t);e(n.params[0])}))})))}async createSession(e){if(this._connected)throw new Error(ERROR_SESSION_CONNECTED);if(this.pending)return;this._key=await this._generateKey();const s=this._formatRequest({method:"wc_sessionRequest",params:[{peerId:this.clientId,peerMeta:this.clientMeta,chainId:e&&e.chainId?e.chainId:null}]});this.handshakeId=s.id,this.handshakeTopic=uuid(),this._sendSessionRequest(s,"Session update rejected",{topic:this.handshakeTopic}),this._eventManager.trigger({event:"display_uri",params:[this.uri]})}approveSession(e){if(this._connected)throw new Error(ERROR_SESSION_CONNECTED);this.chainId=e.chainId,this.accounts=e.accounts,this.networkId=e.networkId||0,this.rpcUrl=e.rpcUrl||"";const s={approved:!0,chainId:this.chainId,networkId:this.networkId,accounts:this.accounts,rpcUrl:this.rpcUrl,peerId:this.clientId,peerMeta:this.clientMeta},t={id:this.handshakeId,jsonrpc:"2.0",result:s};this._sendResponse(t),this._connected=!0,this._setStorageSession(),this._eventManager.trigger({event:"connect",params:[{peerId:this.peerId,peerMeta:this.peerMeta,chainId:this.chainId,accounts:this.accounts}]})}rejectSession(e){if(this._connected)throw new Error(ERROR_SESSION_CONNECTED);const s=e&&e.message?e.message:ERROR_SESSION_REJECTED,t=this._formatResponse({id:this.handshakeId,error:{message:s}});this._sendResponse(t),this._connected=!1,this._eventManager.trigger({event:"disconnect",params:[{message:s}]}),this._removeStorageSession()}updateSession(e){if(!this._connected)throw new Error(ERROR_SESSION_DISCONNECTED);this.chainId=e.chainId,this.accounts=e.accounts,this.networkId=e.networkId||0,this.rpcUrl=e.rpcUrl||"";const s={approved:!0,chainId:this.chainId,networkId:this.networkId,accounts:this.accounts,rpcUrl:this.rpcUrl},t=this._formatRequest({method:"wc_sessionUpdate",params:[s]});this._sendSessionRequest(t,"Session update rejected"),this._eventManager.trigger({event:"session_update",params:[{chainId:this.chainId,accounts:this.accounts}]}),this._manageStorageSession()}async killSession(e){const s=e?e.message:"Session Disconnected",t=this._formatRequest({method:"wc_sessionUpdate",params:[{approved:!1,chainId:null,networkId:null,accounts:null}]});await this._sendRequest(t),this._handleSessionDisconnect(s)}async sendTransaction(e){if(!this._connected)throw new Error(ERROR_SESSION_DISCONNECTED);const s=parseTransactionData(e),t=this._formatRequest({method:"eth_sendTransaction",params:[s]});return await this._sendCallRequest(t)}async signTransaction(e){if(!this._connected)throw new Error(ERROR_SESSION_DISCONNECTED);const s=parseTransactionData(e),t=this._formatRequest({method:"eth_signTransaction",params:[s]});return await this._sendCallRequest(t)}async signMessage(e){if(!this._connected)throw new Error(ERROR_SESSION_DISCONNECTED);const s=this._formatRequest({method:"eth_sign",params:e});return await this._sendCallRequest(s)}async signPersonalMessage(e){if(!this._connected)throw new Error(ERROR_SESSION_DISCONNECTED);e=parsePersonalSign(e);const s=this._formatRequest({method:"personal_sign",params:e});return await this._sendCallRequest(s)}async signTypedData(e){if(!this._connected)throw new Error(ERROR_SESSION_DISCONNECTED);const s=this._formatRequest({method:"eth_signTypedData",params:e});return await this._sendCallRequest(s)}async updateChain(e){if(!this._connected)throw new Error("Session currently disconnected");const s=this._formatRequest({method:"wallet_updateChain",params:[e]});return await this._sendCallRequest(s)}unsafeSend(e,s){return this._sendRequest(e,s),this._eventManager.trigger({event:"call_request_sent",params:[{request:e,options:s}]}),new Promise(((s,t)=>{this._subscribeToResponse(e.id,((e,n)=>{if(e)t(e);else{if(!n)throw new Error(ERROR_MISSING_JSON_RPC);s(n)}}))}))}async sendCustomRequest(e,s){if(!this._connected)throw new Error(ERROR_SESSION_DISCONNECTED);switch(e.method){case"eth_accounts":return this.accounts;case"eth_chainId":return convertNumberToHex(this.chainId);case"eth_sendTransaction":case"eth_signTransaction":e.params&&(e.params[0]=parseTransactionData(e.params[0]));break;case"personal_sign":e.params&&(e.params=parsePersonalSign(e.params))}const t=this._formatRequest(e);return await this._sendCallRequest(t,s)}approveRequest(e){if(!isJsonRpcResponseSuccess(e))throw new Error(ERROR_MISSING_RESULT);{const s=this._formatResponse(e);this._sendResponse(s)}}rejectRequest(e){if(!isJsonRpcResponseError(e))throw new Error(ERROR_MISSING_ERROR);{const s=this._formatResponse(e);this._sendResponse(s)}}transportClose(){this._transport.close()}async _sendRequest(e,s){const t=this._formatRequest(e),n=await this._encrypt(t),r=void 0!==(null==s?void 0:s.topic)?s.topic:this.peerId,i=JSON.stringify(n),o=void 0!==(null==s?void 0:s.forcePushNotification)?!s.forcePushNotification:isSilentPayload(t);this._transport.send(i,r,o)}async _sendResponse(e){const s=await this._encrypt(e),t=this.peerId,n=JSON.stringify(s);this._transport.send(n,t,!0)}async _sendSessionRequest(e,s,t){this._sendRequest(e,t),this._subscribeToSessionResponse(e.id,s)}_sendCallRequest(e,s){return this._sendRequest(e,s),this._eventManager.trigger({event:"call_request_sent",params:[{request:e,options:s}]}),this._subscribeToCallResponse(e.id)}_formatRequest(e){if(void 0===e.method)throw new Error(ERROR_MISSING_METHOD);return{id:void 0===e.id?payloadId():e.id,jsonrpc:"2.0",method:e.method,params:void 0===e.params?[]:e.params}}_formatResponse(e){if(void 0===e.id)throw new Error(ERROR_MISSING_ID);const s={id:e.id,jsonrpc:"2.0"};if(isJsonRpcResponseError(e)){const t=formatRpcError(e.error);return Object.assign(Object.assign(Object.assign({},s),e),{error:t})}if(isJsonRpcResponseSuccess(e)){return Object.assign(Object.assign({},s),e)}throw new Error(ERROR_INVALID_RESPONSE)}_handleSessionDisconnect(e){const s=e||"Session Disconnected";this._connected||(this._qrcodeModal&&this._qrcodeModal.close(),removeLocal(mobileLinkChoiceKey)),this._connected&&(this._connected=!1),this._handshakeId&&(this._handshakeId=0),this._handshakeTopic&&(this._handshakeTopic=""),this._peerId&&(this._peerId=""),this._eventManager.trigger({event:"disconnect",params:[{message:s}]}),this._removeStorageSession(),this.transportClose()}_handleSessionResponse(e,s){s&&s.approved?(this._connected?(s.chainId&&(this.chainId=s.chainId),s.accounts&&(this.accounts=s.accounts),this._eventManager.trigger({event:"session_update",params:[{chainId:this.chainId,accounts:this.accounts}]})):(this._connected=!0,s.chainId&&(this.chainId=s.chainId),s.accounts&&(this.accounts=s.accounts),s.peerId&&!this.peerId&&(this.peerId=s.peerId),s.peerMeta&&!this.peerMeta&&(this.peerMeta=s.peerMeta),this._eventManager.trigger({event:"connect",params:[{peerId:this.peerId,peerMeta:this.peerMeta,chainId:this.chainId,accounts:this.accounts}]})),this._manageStorageSession()):this._handleSessionDisconnect(e)}async _handleIncomingMessages(e){if(![this.clientId,this.handshakeTopic].includes(e.topic))return;let s;try{s=JSON.parse(e.payload)}catch(e){return}const t=await this._decrypt(s);t&&this._eventManager.trigger(t)}_subscribeToSessionRequest(){this._transport.subscribe(this.handshakeTopic)}_subscribeToResponse(e,s){this.on(`response:${e}`,s)}_subscribeToSessionResponse(e,s){this._subscribeToResponse(e,((e,t)=>{e?this._handleSessionResponse(e.message):isJsonRpcResponseSuccess(t)?this._handleSessionResponse(s,t.result):t.error&&t.error.message?this._handleSessionResponse(t.error.message):this._handleSessionResponse(s)}))}_subscribeToCallResponse(e){return new Promise(((s,t)=>{this._subscribeToResponse(e,((e,n)=>{e?t(e):isJsonRpcResponseSuccess(n)?s(n.result):n.error&&n.error.message?t(n.error):t(new Error(ERROR_INVALID_RESPONSE))}))}))}_subscribeToInternalEvents(){this.on("display_uri",(()=>{this._qrcodeModal&&this._qrcodeModal.open(this.uri,(()=>{this._eventManager.trigger({event:"modal_closed",params:[]})}),this._qrcodeModalOptions)})),this.on("connect",(()=>{this._qrcodeModal&&this._qrcodeModal.close()})),this.on("call_request_sent",((e,s)=>{const{request:t}=s.params[0];if(isMobile()&&this._signingMethods.includes(t.method)){const e=getLocal(mobileLinkChoiceKey);e&&(window.location.href=e.href)}})),this.on("wc_sessionRequest",((e,s)=>{e&&this._eventManager.trigger({event:"error",params:[{code:"SESSION_REQUEST_ERROR",message:e.toString()}]}),this.handshakeId=s.id,this.peerId=s.params[0].peerId,this.peerMeta=s.params[0].peerMeta;const t=Object.assign(Object.assign({},s),{method:"session_request"});this._eventManager.trigger(t)})),this.on("wc_sessionUpdate",((e,s)=>{e&&this._handleSessionResponse(e.message),this._handleSessionResponse("Session disconnected",s.params[0])}))}_initTransport(){this._transport.on("message",(e=>this._handleIncomingMessages(e))),this._transport.on("open",(()=>this._eventManager.trigger({event:"transport_open",params:[]}))),this._transport.on("close",(()=>this._eventManager.trigger({event:"transport_close",params:[]}))),this._transport.on("error",(()=>this._eventManager.trigger({event:"transport_error",params:["Websocket connection failed"]}))),this._transport.open()}_formatUri(){return`${this.protocol}:${this.handshakeTopic}@${this.version}?bridge=${encodeURIComponent(this.bridge)}&key=${this.key}`}_parseUri(e){const s=parseWalletConnectUri(e);if(s.protocol===this.protocol){if(!s.handshakeTopic)throw Error("Invalid or missing handshakeTopic parameter value");const e=s.handshakeTopic;if(!s.bridge)throw Error("Invalid or missing bridge url parameter value");const t=decodeURIComponent(s.bridge);if(!s.key)throw Error("Invalid or missing key parameter value");return{handshakeTopic:e,bridge:t,key:s.key}}throw new Error(ERROR_INVALID_URI)}async _generateKey(){if(this._cryptoLib){return await this._cryptoLib.generateKey()}return null}async _encrypt(e){const s=this._key;if(this._cryptoLib&&s){return await this._cryptoLib.encrypt(e,s)}return null}async _decrypt(e){const s=this._key;if(this._cryptoLib&&s){return await this._cryptoLib.decrypt(e,s)}return null}_getStorageSession(){let e=null;return this._sessionStorage&&(e=this._sessionStorage.getSession()),e}_setStorageSession(){this._sessionStorage&&this._sessionStorage.setSession(this.session)}_removeStorageSession(){this._sessionStorage&&this._sessionStorage.removeSession()}_manageStorageSession(){this._connected?this._setStorageSession():this._removeStorageSession()}_registerPushServer(e){if(!e.url||"string"!=typeof e.url)throw Error("Invalid or missing pushServerOpts.url parameter value");if(!e.type||"string"!=typeof e.type)throw Error("Invalid or missing pushServerOpts.type parameter value");if(!e.token||"string"!=typeof e.token)throw Error("Invalid or missing pushServerOpts.token parameter value");const s={bridge:this.bridge,topic:this.clientId,type:e.type,token:e.token,peerName:"",language:e.language||""};this.on("connect",(async(t,n)=>{if(t)throw t;if(e.peerMeta){const e=n.params[0].peerMeta.name;s.peerName=e}try{const t=await fetch(`${e.url}/new`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(s)});if(!(await t.json()).success)throw Error("Failed to register in Push Server")}catch(t){throw Error("Failed to register in Push Server")}}))}}export default Connector;
//# sourceMappingURL=/sm/fb7c518ef23cd0c16bd6ba90d6ed6c438187d9439763fbd3a93efab53812bf2b.map